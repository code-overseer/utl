---
# We'll use defaults from the LLVM style, but with 4 columns indentation.
BasedOnStyle: LLVM
---
Language: Cpp
AlignAfterOpenBracket: DontAlign
AlignEscapedNewlines: Left
AlignOperands: DontAlign
AlignTrailingComments: true
AllowShortBlocksOnASingleLine: Empty
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: Inline
AllowShortLambdasOnASingleLine: All
# AllowShortCompoundRequirementOnASingleLine: true
AlignArrayOfStructures: Right
AlignConsecutiveAssignments:
  Enabled: false
AlignConsecutiveDeclarations:
  Enabled: false

BraceWrapping:
  AfterCaseLabel: false
  AfterClass: false
  AfterControlStatement: false
  AfterEnum: false
  AfterFunction: false
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Custom
BreakInheritanceList: AfterColon
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeComma
BreakStringLiterals: true
# BreakTemplateDeclarations: MultiLine
AlwaysBreakTemplateDeclarations: true
IndentRequiresClause: false
ColumnLimit: 100
CompactNamespaces: false
PackConstructorInitializers: CurrentLine
Cpp11BracedListStyle: true
EmptyLineBeforeAccessModifier: LogicalBlock
IndentAccessModifiers: false
IndentCaseBlocks: false
IndentCaseLabels: false
IndentPPDirectives: AfterHash
IndentWidth: 4
AccessModifierOffset: -4
IndentWrappedFunctionNames: false
NamespaceIndentation: None
DerivePointerAlignment: false
PointerAlignment: Left
QualifierAlignment: Right
SortIncludes: CaseSensitive
SpaceBeforeCaseColon: false
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: false
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: false
  AfterOverloadedOperator: false
  AfterRequiresInClause: true
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
FixNamespaceComments: true
PPIndentWidth: 2
IncludeBlocks:   Regroup
IncludeCategories:
  - Regex:           '.*\.generated\.h'
    Priority:        100
  - Regex:           '"utl/utl_config.h"'
    Priority:        0
  - Regex:           '"utl/configuration/.*"'
    Priority:        0
  - Regex:           '"utl/preprocessor/.*"'
    Priority:        5
  - Regex:           '"utl/.*_fwd.h"'
    Priority:        8
  - Regex:           '".*"'
    Priority:        10
  - Regex:           '^<.*\.(h)>'
    Priority:        30
  - Regex:           '^<.*>'
    Priority:        40

IfMacros: ['UTL_TRY','UTL_IF_CONSTEVAL','UTL_IF_CONSTEXPR']
AttributeMacros: []
StatementMacros: ['UTL_NAMESPACE_BEGIN', 'UTL_NAMESPACE_END']
Macros:
- UTL_CATCH(X)=else if ([](X){ return true; }())
- UTL_NOEXCEPT(X)=noexcept(X)
- UTL_THROWS=noexcept
- UTL_INLINE_CXX17=inline
- UTL_CONSTEXPR_CXX11=constexpr
- UTL_CONSTEXPR_CXX14=constexpr
- UTL_CONSTEXPR_CXX17=constexpr
- UTL_CONSTEXPR_CXX20=constexpr
- UTL_CONSTEXPR_CXX23=constexpr
- UTL_CONSTEVAL=consteval
- UTL_CONSTRAINT_CXX11(X)=,typename=enable_if_t<X>
- UTL_CONSTRAINT_CXX11(X,Y)=,typename=enable_if_t<X,Y>
- UTL_CONSTRAINT_CXX11(X,Y,Z)=,typename=enable_if_t<X,Y,Z>
- UTL_CONSTRAINT_CXX20(X)=requires (X)
- UTL_CONSTRAINT_CXX20(X,Y)=requires (X,Y)
- UTL_CONSTRAINT_CXX20(X,Y,Z)=requires (X,Y,Z)
- UTL_CONCEPT_CXX20(X)=type<X>
- UTL_NODISCARD=[[nodiscard]]
- UTL_ENABLE_IF_CXX11(X,Y)=enable_if_t<Y, X>
- UTL_ATTRIBUTE(X)=[[X]]
- UTL_ATTRIBUTES(X)=[[X]]
- UTL_ATTRIBUTES(X,Y)=[[X,Y]]
- UTL_ATTRIBUTES(X,Y,Z)=[[X,Y,Z]]
- UTL_ATTRIBUTES(X,Y,Z,W)=[[X,Y,Z,W]]
- UTL_NODISCARD=[[nodiscard]]
- UTL_LIFETIMEBOUND=[[clang::lifetimebound]]
- UTL_UNLIKELY=[[unlikely]]
- UTL_LIKELY=[[likely]]
